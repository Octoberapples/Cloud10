#################
# A comprehensive implementation of injecting public keys is available on following URL:
#################


heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

# Declare parameters 
parameters:

  image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: bcedbefb-9b05-43a6-8a04-93321066131e

  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small

  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: Group10

  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public

# Resource allocation
resources:
  cluster_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: group10Sec
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 5000
          port_range_max: 5000
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22
 
  private_network:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_network }
      cidr: 10.10.10.0/24
      dns_nameservers:
        - 130.238.164.6 
        - 130.238.4.133 
        - 130.238.7.10
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_network }

  router-interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: private_subnet }

  instance_port0:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: cluster_sg }
 
  master_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: instance_port0 }         
      user_data: |
        #!/bin/sh
        echo "Hello, World!"
        echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFjuKiUmKFXntODGBo+eYm1dlQZyPkoOTOQP2BE4nw//5LMVThE1W3Ts8KLqfGLFj4a2RFXli4Z2oeF58Gfkb03jt2xuGKSik93aAG5VP4lpPUk53gvlBhGOr8nl74AsreDH7+DxZy+gwaioyddAuojp+WiKBwnWt8HSo/oGSsmEMzXAkAQPx1IjeMGPgWmem1jALb2PggS9yMvB1KhcdSVmDqDgskrzPmHmAgridZ4I5yvXpxd9EefqInohjP05YhMjlAQO6dHZUb9aWhyuVrTx5MEt3ZSEpV6mi0vlUZOs0LU+BZL8oj8NiG3AlMKa66DqSLn2MfVzWVBNLAvPV7 Generated-by-Nova" >> /home/ubuntu/.ssh/authorized_keys
        apt-get update -y
        apt-get upgrade -y
        wget -qO- https://get.docker.com/ | sh
        docker run rabbitmq -p 5672:5672 -d
        docker run kjagiello/cloud-computing-master -p 5000:5000 -d
      user_data_format: RAW

  worker_instance1:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - network: { get_resource: private_network }
      user_data: 
        str_replace:
          template: |
            #!/bin/sh
            echo "Hello, World!"
            echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFjuKiUmKFXntODGBo+eYm1dlQZyPkoOTOQP2BE4nw//5LMVThE1W3Ts8KLqfGLFj4a2RFXli4Z2oeF58Gfkb03jt2xuGKSik93aAG5VP4lpPUk53gvlBhGOr8nl74AsreDH7+DxZy+gwaioyddAuojp+WiKBwnWt8HSo/oGSsmEMzXAkAQPx1IjeMGPgWmem1jALb2PggS9yMvB1KhcdSVmDqDgskrzPmHmAgridZ4I5yvXpxd9EefqInohjP05YhMjlAQO6dHZUb9aWhyuVrTx5MEt3ZSEpV6mi0vlUZOs0LU+BZL8oj8NiG3AlMKa66DqSLn2MfVzWVBNLAvPV7 Generated-by-Nova" >> /home/ubuntu/.ssh/authorized_keys
            apt-get update -y
            apt-get upgrade -y
            echo MYIP master >> /etc/hosts
            wget -qO- https://get.docker.com/ | sh
            docker run kjagiello/cloud-computing-worker -d
          params:       
            MYIP : {get_attr: [instance_port0, fixed_ips, 0, ip_address]}

  worker_instance2:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - network: { get_resource: private_network }
      user_data: 
        str_replace:
          template: |
            #!/bin/sh
            echo "Hello, World!"
            echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFjuKiUmKFXntODGBo+eYm1dlQZyPkoOTOQP2BE4nw//5LMVThE1W3Ts8KLqfGLFj4a2RFXli4Z2oeF58Gfkb03jt2xuGKSik93aAG5VP4lpPUk53gvlBhGOr8nl74AsreDH7+DxZy+gwaioyddAuojp+WiKBwnWt8HSo/oGSsmEMzXAkAQPx1IjeMGPgWmem1jALb2PggS9yMvB1KhcdSVmDqDgskrzPmHmAgridZ4I5yvXpxd9EefqInohjP05YhMjlAQO6dHZUb9aWhyuVrTx5MEt3ZSEpV6mi0vlUZOs0LU+BZL8oj8NiG3AlMKa66DqSLn2MfVzWVBNLAvPV7 Generated-by-Nova" >> /home/ubuntu/.ssh/authorized_keys
            apt-get update -y
            apt-get upgrade -y
            echo MYIP master >> /etc/hosts
            wget -qO- https://get.docker.com/ | sh
            docker run kjagiello/cloud-computing-worker -d
          params:       
            MYIP : {get_attr: [instance_port0, fixed_ips, 0, ip_address]}


  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: instance_port0 } 
  
# Output in case of successful booting
outputs:
  instance_name:
    description: Name of master instance
    value: { get_attr: [master_instance, name] }
  instance_ip:
    description: IP address of master instance
    value: { get_attr: [master_instance, first_address, floating_ip, floating_ip_address] }
